#!/bin/sh /etc/rc.common
#
# Copyright (C) 2015 OpenWrt-dist
# Copyright (C) 2016 fw867 <ffkykzs@gmail.com>
#
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#

START=91
STOP=15
EXTRA_COMMANDS="update"
EXTRA_HELP="	update	Perform the update immediately"

CONFIG=koolproxy
LOGFILE="/var/log/koolproxy.log"
LOCK_FILE=/var/lock/$CONFIG.lock
TEMPPATH="/tmp/kpd"
alias echo_date='echo $(date +%Y年%m月%d日\ %X):'
dnsmasq_restart=0

config_n_get() {
	local ret=$(uci get $CONFIG.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

config_t_get() {
	local index=0
	[ -n "$4" ] && index=$4
	local ret=$(uci get $CONFIG.@$1[$index].$2 2>/dev/null)
	echo ${ret:=$3}
}

factor(){
if [ -z "$1" ] || [ -z "$2" ]; then
		echo ""
	else
		echo "$2 $1"
fi
}

load_acl(){
	local mac
	local ip
	local mode
	config_get mac $1 mac
	config_get ip $1 ipaddr
	config_get mode $1 acl_mode
	if [ -n "$mode" ] && [ -n "$ip" ] || [ -n "$mac" ]; then
		iptables -t nat -A KOOLPROXY $(factor $ip "-s") $(factor $mac "-m mac --mac-source") -p tcp -$(get_jump_mode $mode) $(get_action_chain $mode)
	fi
}

update(){
	rm -f $LOGFILE
	hoston=$(config_t_get global adblock 0)
	[ $hoston -eq 1 ] && /usr/sbin/adblockplus >>$LOGFILE 2>&1 &
}

iptables_ext() {
	iptables -t nat -C $2 $3 2>/dev/null
	local ret=$?
	if [ "$ret" -ne 0 ];then
		iptables -t nat -$1 $2 $3 2>/dev/null
	fi
}

load_config() {
	ENABLED=$(config_t_get global enabled 0)
	[ $ENABLED -ne 1 ] && return 1
	GLOBAL_MODE=$(config_t_get global filter_mode global)
	DEFAULT_ACL_MODE=$(config_t_get global default_acl_mode http)
	REBOOT_MODE=$(config_t_get global reboot_mode disable)
	config_load $CONFIG
	return 0
}

add_dnsmasq() {
	[ "$GLOBAL_MODE" == "adblock" ] && {
		adblockenable=$(config_t_get global adblock 0)
		if [ "$adblockenable" == "1" ];then
			ln -sf /etc/dnsmasq.d/dnsmasq.adblock /tmp/dnsmasq.d/dnsmasq.adblock
		fi
		ln -sf /etc/dnsmasq.d/adblock.conf /tmp/dnsmasq.d/adblock.conf
		dnsmasq_restart=1
	}
}

gen_ca() {
	if [ ! -f "/usr/share/koolproxy/data/certs/ca.crt" ]||[ ! -f "/usr/share/koolproxy/data/private/ca.key.pem" ];then
		rm -rf /usr/share/koolproxy/data/private
		rm -rf /usr/share/koolproxy/data/certs/ca.crt
		sh /usr/share/koolproxy/data/gen_ca.sh >/dev/null 2>&1
	fi
}

stop_dnsmasq() {
	adenable=$(config_t_get global adblock 0)
	ENABLED=$(config_t_get global enabled 0)
	if [ "$adenable" -eq 0 -o "$ENABLED" -eq 0 ];then
		sed -i '/koolproxy update/d' /etc/crontabs/root >/dev/null 2>&1
		[ -L "/tmp/dnsmasq.d/dnsmasq.adblock" ] && {
			rm -rf /tmp/dnsmasq.d/dnsmasq.adblock
			dnsmasq_restart=1
		}
		[ -L "/tmp/dnsmasq.d/adblock.conf" ] && {
			rm -rf /tmp/dnsmasq.d/adblock.conf
			dnsmasq_restart=1
		}
	fi
}

restart_dnsmasq(){
	[ "$dnsmasq_restart" -eq 1 ] && /etc/init.d/dnsmasq restart > /dev/null 2>&1
}

get_action_chain() {
	case "$1" in
		disable)
			echo "RETURN"
		;;
		http)
			echo "KOOLPROXY_HTTP"
		;;
		global)
			echo "KOOLPROXY_HTTPS"
		;;
	esac
}

get_jump_mode(){
	case "$1" in
		disable)
			echo "j"
		;;
		*)
			echo "g"
		;;
	esac
}

add_koolproxy_cru(){
	[ "$GLOBAL_MODE" == "adblock" ] && {
		time=$(config_t_get global time_update)
		wirtecron=$(cat /etc/crontabs/root | grep "00 $time * * *" | grep koolproxy)
		if [ -z "$wirtecron" ];then
		sed -i '/koolproxy update/d' /etc/crontabs/root >/dev/null 2>&1
		echo "0 $time * * * /etc/init.d/koolproxy update" >> /etc/crontabs/root 
		fi
	}
}

add_rule() {
	iptables -t nat -N KOOLPROXY 2>/dev/null
	iptables -t nat -N KOOLPROXY_HTTP 2>/dev/null
	iptables -t nat -N KOOLPROXY_HTTPS 2>/dev/null
	
	#创建所需的ipset
	IPSET_ADB="adblock"
	ipset -! create $IPSET_ADB nethash && ipset -! add $IPSET_ADB 110.110.110.110 2>/dev/null
	sed -e "s/^/add $IPSET_ADB &/g" /etc/gfwlist/adblockip | awk '{print $0} END{print "COMMIT"}' | ipset -R 2>/dev/null
	#生成代理规则
	#  忽略特殊IP段
	iptables_ext A KOOLPROXY "-d 0.0.0.0/8 -j RETURN"
	iptables_ext A KOOLPROXY "-d 10.0.0.0/8 -j RETURN"
	iptables_ext A KOOLPROXY "-d 100.64.0.0/10 -j RETURN"
	iptables_ext A KOOLPROXY "-d 127.0.0.0/8 -j RETURN"
	iptables_ext A KOOLPROXY "-d 169.254.0.0/16 -j RETURN"
	iptables_ext A KOOLPROXY "-d 172.16.0.0/12 -j RETURN"
	iptables_ext A KOOLPROXY "-d 192.168.0.0/16 -j RETURN"
	iptables_ext A KOOLPROXY "-d 224.0.0.0/4 -j RETURN"
	iptables_ext A KOOLPROXY "-d 240.0.0.0/4 -j RETURN"
	#  生成对应CHAIN
	LOCAL_PORT=3000
	iptables_ext A KOOLPROXY_HTTP "-p tcp -m multiport --dport 80 -j REDIRECT --to-ports $LOCAL_PORT"
	iptables_ext A KOOLPROXY_HTTPS "-p tcp -m multiport --dport 80,443 -j REDIRECT --to-ports $LOCAL_PORT"
	#加载ACLS
	config_foreach load_acl acl_rule
	#加载默认访问控制模式
	iptables -t nat -A KOOLPROXY -p tcp -j $(get_action_chain $DEFAULT_ACL_MODE)
	
	# 重定所有流量到 KOOLPROXY
	PR_NU=`iptables -nvL PREROUTING -t nat |sed 1,2d | sed -n '/prerouting_rule/='`
	if [ -z "$PR_NU" ]; then
		PR_NU=1
	else
		let PR_NU+=1
	fi
	#确保添加到prerouting_rule规则之后
	if [ "$GLOBAL_MODE" == "adblock" ]; then
		# ipset 黑名单模式
		iptables -t nat -I PREROUTING $PR_NU -p tcp -m set --match-set $IPSET_ADB dst -j KOOLPROXY
	else
		#其他模式
		iptables -t nat -I PREROUTING $PR_NU -p tcp -j KOOLPROXY
	fi
	
}

del_rule() {
	kp_nums=`iptables -t nat -L PREROUTING 2> /dev/null|grep -c "KOOLPROXY"`
	if [ -n "$kp_nums" ]; then
		until [ "$kp_nums" = 0 ]
	do
		kp_rules=`iptables -t nat -L PREROUTING --line-num 2> /dev/null|grep "KOOLPROXY" |awk '{print $1}'`
		for kp_rule in $kp_rules
		do
			iptables -t nat -D PREROUTING $kp_rule 2> /dev/null
			break
		done
		kp_nums=`expr $kp_nums - 1`
	done
	fi
	iptables -t nat -F KOOLPROXY 2>/dev/null && iptables -t nat -X KOOLPROXY 2>/dev/null
	iptables -t nat -F KOOLPROXY_HTTP 2>/dev/null && iptables -t nat -X KOOLPROXY_HTTP 2>/dev/null
	iptables -t nat -F KOOLPROXY_HTTPS 2>/dev/null && iptables -t nat -X KOOLPROXY_HTTPS 2>/dev/null
}

dns_takeover(){
	ss_chromecast=`uci -q get shadowsocks.@global[0].dns_53`
	ss_enable=`iptables -t nat -L PREROUTING |grep SHADOWSOCKS |wc -l`
	[ -z "$ss_chromecast" ] && ss_chromecast=0
	lan_ipaddr=`uci get network.lan.ipaddr`
	chromecast_nu=`iptables -t nat -L PREROUTING -v -n --line-numbers|grep "dpt:53"|awk '{print $1}'`
	if [ "$GLOBAL_MODE" == "adblock" ]; then
		if [ -z "$chromecast_nu" ]; then
			iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		else
			iptables -t nat -D PREROUTING $chromecast_nu >/dev/null 2>&1
			iptables -t nat -A PREROUTING -p udp --dport 53 -j DNAT --to $lan_ipaddr >/dev/null 2>&1
		fi
	else
	
			if [ -n "$chromecast_nu" ]; then
				iptables -t nat -D PREROUTING $chromecast_nu >/dev/null 2>&1
			fi
		
	fi
}

del_dns_takeover(){
	ss_chromecast=`uci -q get shadowsocks.@global[0].dns_53`
	ss_enable=`iptables -t nat -L PREROUTING |grep SHADOWSOCKS |wc -l`
	[ -z "$ss_chromecast" ] && ss_chromecast=0
	if [ "$ss_chromecast" -eq 0 ] || [ "$ss_enable" -eq 0 ]; then
		chromecast_nu=`iptables -t nat -L PREROUTING -v -n --line-numbers|grep "dpt:53"|awk '{print $1}'`
		[ -n "$chromecast_nu" ] && iptables -t nat -D PREROUTING $chromecast_nu >/dev/null 2>&1
	fi
}

write_reboot_job(){
	[ ! -f  "/etc/crontabs/root" ] && touch /etc/crontabs/root
	CRONTAB=`cat /etc/crontabs/root | grep "koolproxy restart"`
	if [ "$REBOOT_MODE" == "regular" ]; then
		[ -z "$CRONTAB" ] && {
			regular_time=$(config_t_get global regular_time 5)
			echo "0 $regular_time * * * /etc/init.d/koolproxy restart" >> /etc/crontabs/root
		}
	elif [ "$REBOOT_MODE" == "interval" ]; then
		[ -z "$CRONTAB" ] && {
			interval_time=$(config_t_get global interval_time 24)
			echo "0 */$interval_time * * * /etc/init.d/koolproxy restart" >> /etc/crontabs/root
		}
	fi
}

remove_reboot_job(){
	jobexist=`cat /etc/crontabs/root 2>/dev/null | grep "koolproxy restart"`
	[ -n "$jobexist" ] && sed -i '/koolproxy restart/d' /etc/crontabs/root >/dev/null 2>&1
}


start() {
	! load_config && return 1
	iptables -t nat -C PREROUTING -p tcp -j KOOLPROXY 2>/dev/null && [ $? -eq 0 ] && exit 0;
	gen_ca
	#config_foreach get_rule source
	#防止并发开启服务
	[ -f "$LOCK_FILE" ] && return 3
	touch "$LOCK_FILE"
	
	[ "$GLOBAL_MODE" == "video" ] && arg="-e" || arg=""

	/usr/share/koolproxy/koolproxy $arg --mark -d
	add_dnsmasq && restart_dnsmasq
	add_rule
	dns_takeover
	add_koolproxy_cru
	write_reboot_job
	rm -f "$LOCK_FILE"
	return 0
}

stop() {
	while [ -f "$LOCK_FILE" ]; do
		sleep 1s
	done
	del_rule
	del_dns_takeover
	remove_reboot_job
	ipset -F adblock >/dev/null 2>&1 &
	ipset -X adblock >/dev/null 2>&1 &
	rm -f $LOGFILE
	kill -9 $(ps|grep '/usr/share/koolproxy/koolproxy'|grep -v 'grep'|awk '{print$1}') >/dev/null 2>&1
	stop_dnsmasq && restart_dnsmasq
}
