#!/bin/sh  /etc/rc.common
#
# Copyright (C) 2017 ShadowsocksR By Alx
# This is free software, licensed under the GNU General Public License v3.
# See /LICENSE for more information.
#
#
alias echo_date='echo 【$(date +%Y年%m月%d日\ %X)】:'
local cycle_time=60
local switch_time=3
local normal_flag=0
local server_locate=0
local server_count=0

NAME=shadowsocksr
ENABLE_SERVER=nil
CONFIG_SWTICH_FILE=/var/etc/${NAME}_t.json


[ -n "$1" ] && cycle_time=$1
[ -n "$2" ] && switch_time=$2


uci_get_by_name() {
	local ret=$(uci get $NAME.$1.$2 2>/dev/null)
	echo ${ret:=$3}
}

uci_get_by_type() {
	local ret=$(uci get $NAME.@$1[0].$2 2>/dev/null)
	echo ${ret:=$3}
}

DEFAULT_SERVER=$(uci_get_by_type global global_server)
CURRENT_SERVER=$DEFAULT_SERVER

#判断代理是否正常
check_proxy() {
	#echo_date 服务器1:$CURRENT_SERVER  服务器2:$DEFAULT_SERVER  >> /tmp/sss.txt

	local servername=$(uci_get_by_name $CURRENT_SERVER server)
	ping_text=`ping -4 $servername -c 2 -w 2 -q`
	ping_time=`echo $ping_text | awk -F '/' '{print $4}'`
	#echo_date 当前服务器:$CURRENT_SERVER  $ping_text  >> /tmp/sss.txt
	[ -z "$ping_time" ] &&  return 1
	return 0
	#echo_date $CURRENT_SERVER : $ping_text : $ping_time >> /tmp/sss.txt

}


test_proxy() {
	local servername=$(uci_get_by_name $1 server)
	local serverport=$(uci_get_by_name $1 server_port)
	
	ret=$(ping -c 3 $servername  | grep 'loss' | awk -F ',' '{ print $3 }' | awk -F "%" '{ print $1 }') 
	[ -z "$ret"  ] && return 1
	[ "$ret" -gt "50" ] && return 1
	ipset add ss_spec_wan_ac $servername 2>/dev/null
	ret=$?




	ping_text=`ping -4 $servername -c 2 -w 2 -q`
	ping_time=`echo $ping_text | awk -F '/' '{print $4}'`


	local ret2=$?
	if [ "$ret" = "0" ] ;then
    		ipset del ss_spec_wan_ac $servername 2>/dev/null
	fi
	[ -z "$ping_time" ] &&  return 1
	return 0



}

search_proxy() {
	let server_count=server_count+1
	[ "$normal_flag" = "1" -a "$server_count" -le "$server_locate" ] && return 0
	[ "$(uci_get_by_name $1 switch_enable)" != "1"  ]  && return 1
	[ $ENABLE_SERVER != nil ] && return 0
	[ "$1" = "$CURRENT_SERVER" ] && return 0
	local servername=$(uci_get_by_name $1 server)
	local serverport=$(uci_get_by_name $1 server_port)
	ipset add ss_spec_wan_ac $servername 2>/dev/null
	ret=$?
	

	ping_text=`ping -4 $servername -c 2 -w 2 -q`
	ping_time=`echo $ping_text | awk -F '/' '{print $4}'`

	if [ "$ret" = "0" ] ;then
   		ipset del ss_spec_wan_ac $servername 2>/dev/null
	fi

	[ -z "$ping_time" ] &&  return 1

	server_locate=$server_count
  	ENABLE_SERVER=$1
   	return 0


}
#选择可用的代理
select_proxy() {

    	config_load $NAME
    	ENABLE_SERVER=nil
    	mkdir -p /var/run /var/etc
    	server_count=0
    	config_foreach search_proxy servers

}

#切换代理
switch_proxy() {
      	/usr/share/shadowsocksr/ssr.sh start $1
      	return 0
}

start() {
#不支持kcptun启用时的切换
[ $(uci_get_by_name $DEFAULT_SERVER kcp_enable) = "1"  ]  && return 1

while [ "1" = "1" ]  #死循环
do 
   	sleep 15
  	 #判断当前代理是否为缺省服务器

	#echo_date 服务器1:$CURRENT_SERVER  服务器2:$DEFAULT_SERVER  >> /tmp/sss.txt
   	if [ "$CURRENT_SERVER" != "$DEFAULT_SERVER" ] ;then
      	 #echo "not default proxy"
      	#检查缺省服务器是否正常
       		if test_proxy $DEFAULT_SERVER  ;then
            		#echo "switch to default proxy"
            		#缺省服务器正常，切换回来
            		CURRENT_SERVER=$DEFAULT_SERVER
            		switch_proxy $CURRENT_SERVER 
            		logger -t "$NAME" "switch to default ["$(uci_get_by_name $CURRENT_SERVER server)"] proxy!"
            		continue
       		fi
    	fi

   #判断当前代理是否正常
   	check_proxy  
   	current_ret=$?
   	if [ "$current_ret" = "1" ] ;then
           	#当前代理错误，判断有无可用的服务器
           	#echo "current error"
           	select_proxy
        	if [ "$ENABLE_SERVER" != nil ] ;then
		     #有其他服务器可用，进行切换
             	#echo $(uci_get_by_name $new_proxy server)
           		CURRENT_SERVER=$ENABLE_SERVER
            		switch_proxy $CURRENT_SERVER
            		normal_flag=1
            		logger -t "$NAME" "switch proxy ["$(uci_get_by_name $CURRENT_SERVER server)"] success!"
            		#echo "switch ok"
         	else
             		normal_flag=0 
          	fi
   	else
        	normal_flag=0   
   	fi

done
}
